
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 29 14:53:48 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 29 14:53:48 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\006\000\002\007\004\000\002\007\004\000\002\007" +
    "\003\000\002\007\005\000\002\010\003\000\002\010\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\022\002\uffff\004\011\007\013\010\021\013" +
    "\012\015\006\016\016\017\005\001\002\000\016\005\ufff9" +
    "\007\ufff9\010\ufff9\011\026\012\027\014\ufff9\001\002\000" +
    "\016\005\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0" +
    "\001\002\000\004\013\044\001\002\000\016\005\ufff2\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\001\002\000\004" +
    "\002\043\001\002\000\004\017\040\001\002\000\016\007" +
    "\013\010\021\013\012\015\006\016\016\017\005\001\002" +
    "\000\006\016\016\017\005\001\002\000\004\005\033\001" +
    "\002\000\016\005\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\014\ufff6\001\002\000\016\005\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\014\uffef\001\002\000\004\005\ufffe\001\002" +
    "\000\010\005\ufffd\007\023\010\024\001\002\000\006\016" +
    "\016\017\005\001\002\000\016\005\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\001\002\000\016\007\013\010" +
    "\021\013\012\015\006\016\016\017\005\001\002\000\016" +
    "\007\013\010\021\013\012\015\006\016\016\017\005\001" +
    "\002\000\016\005\ufffa\007\ufffa\010\ufffa\011\026\012\027" +
    "\014\ufffa\001\002\000\016\007\013\010\021\013\012\015" +
    "\006\016\016\017\005\001\002\000\016\007\013\010\021" +
    "\013\012\015\006\016\016\017\005\001\002\000\016\005" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7\001\002" +
    "\000\016\005\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\001\002\000\016\005\ufffb\007\ufffb\010\ufffb\011\026" +
    "\012\027\014\ufffb\001\002\000\022\002\uffff\004\011\007" +
    "\013\010\021\013\012\015\006\016\016\017\005\001\002" +
    "\000\004\002\000\001\002\000\016\005\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\014\ufff3\001\002\000\010\007\023" +
    "\010\024\014\037\001\002\000\016\005\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\001\002\000\004\006\041" +
    "\001\002\000\016\007\013\010\021\013\012\015\006\016" +
    "\016\017\005\001\002\000\010\005\ufffc\007\023\010\024" +
    "\001\002\000\004\002\001\001\002\000\016\007\013\010" +
    "\021\013\012\015\006\016\016\017\005\001\002\000\010" +
    "\007\023\010\024\014\046\001\002\000\016\005\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\020\002\007\003\013\004\016\005\017\006" +
    "\003\007\014\010\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\035\006\003\007\014" +
    "\010\006\001\001\000\004\010\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\021\001\001\000\002\001" +
    "\001\000\010\006\031\007\014\010\006\001\001\000\010" +
    "\006\024\007\014\010\006\001\001\000\002\001\001\000" +
    "\006\007\030\010\006\001\001\000\006\007\027\010\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\033\003\013\004\016\005\017\006\003" +
    "\007\014\010\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\041\006\003\007\014\010\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\044\006\003" +
    "\007\014\010\006\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

 HashMap laMap = new HashMap();

public int facto(int nb) {
    int val;
    if(nb >= 0) {
       val = factoCalc(nb);
    } else {
        val = factoCalc(-nb);
    }
    return val;
}

public int factoCalc(int nb) {
    if(nb == 0) {
        return 1;
    }

    return nb * factoCalc(nb-1);
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // atome ::= ENTIER 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atome",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atome ::= IDENT 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Integer)laMap.get(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atome",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // facteur ::= PAROUV expr PARFER 
            {
              Integer RESULT =null;
		int evalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer eval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = eval ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // facteur ::= atome 
            {
              Integer RESULT =null;
		int avalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer aval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aval ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // facteur ::= PLUS atome 
            {
              Integer RESULT =null;
		int avalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer aval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aval ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // facteur ::= MOINS atome 
            {
              Integer RESULT =null;
		int avalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer aval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(- aval.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // facteur ::= FACTORIELLE PAROUV expr PARFER 
            {
              Integer RESULT =null;
		int evalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int evalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer eval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Integer(facto(eval.intValue())) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // terme ::= facteur 
            {
              Integer RESULT =null;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fval; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terme",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // terme ::= terme DIV facteur 
            {
              Integer RESULT =null;
		int tvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(tval.intValue()/fval.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terme",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // terme ::= terme MULT facteur 
            {
              Integer RESULT =null;
		int tvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer fval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(tval.intValue()*fval.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terme",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= terme 
            {
              Integer RESULT =null;
		int tvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tval; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MOINS terme 
            {
              Integer RESULT =null;
		int evalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer eval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(eval.intValue() - tval.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS terme 
            {
              Integer RESULT =null;
		int evalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int evalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer eval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tvalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tvalright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer tval = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Integer(eval.intValue() + tval.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // affect ::= SET IDENT EGAL expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 laMap.put(id,val);
                                         System.out.println("ajout de ("+id+","+val+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("affect",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inst ::= expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("=>"+val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inst ::= affect 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= inst POINTV instructions 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instructions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

