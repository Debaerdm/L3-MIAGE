
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 29 13:54:34 CET 2016
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 29 13:54:34 CET 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\004\000\002\002\005\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\007\004\000\002\007\004\000\002\007\003\000\002\007" +
    "\005\000\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\020\002\uffff\004\010\007\013\010\017\013" +
    "\015\014\011\016\006\001\002\000\016\005\ufff9\007\ufff9" +
    "\010\ufff9\011\024\012\025\015\ufff9\001\002\000\016\005" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\001\002" +
    "\000\016\005\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\015" +
    "\ufff1\001\002\000\004\002\042\001\002\000\004\016\037" +
    "\001\002\000\014\007\013\010\017\013\015\014\011\016" +
    "\006\001\002\000\004\005\033\001\002\000\006\013\015" +
    "\016\006\001\002\000\016\005\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\015\ufff6\001\002\000\016\005\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\015\ufff0\001\002\000\004\005" +
    "\ufffe\001\002\000\006\013\015\016\006\001\002\000\010" +
    "\005\ufffd\007\021\010\022\001\002\000\014\007\013\010" +
    "\017\013\015\014\011\016\006\001\002\000\014\007\013" +
    "\010\017\013\015\014\011\016\006\001\002\000\016\005" +
    "\ufffa\007\ufffa\010\ufffa\011\024\012\025\015\ufffa\001\002" +
    "\000\014\007\013\010\017\013\015\014\011\016\006\001" +
    "\002\000\014\007\013\010\017\013\015\014\011\016\006" +
    "\001\002\000\016\005\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\015\ufff7\001\002\000\016\005\ufff8\007\ufff8\010\ufff8" +
    "\011\ufff8\012\ufff8\015\ufff8\001\002\000\016\005\ufffb\007" +
    "\ufffb\010\ufffb\011\024\012\025\015\ufffb\001\002\000\016" +
    "\005\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5\001" +
    "\002\000\016\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\015\ufff4\001\002\000\020\002\uffff\004\010\007\013\010" +
    "\017\013\015\014\011\016\006\001\002\000\004\002\000" +
    "\001\002\000\010\007\021\010\022\015\036\001\002\000" +
    "\016\005\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2" +
    "\001\002\000\004\006\040\001\002\000\014\007\013\010" +
    "\017\013\015\014\011\016\006\001\002\000\010\005\ufffc" +
    "\007\021\010\022\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\020\002\006\003\011\004\015\005\017\006" +
    "\003\007\013\010\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\034\006\003\007\013\010\004\001\001" +
    "\000\002\001\001\000\004\010\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\030" +
    "\001\001\000\002\001\001\000\010\006\027\007\013\010" +
    "\004\001\001\000\010\006\022\007\013\010\004\001\001" +
    "\000\002\001\001\000\006\007\026\010\004\001\001\000" +
    "\006\007\025\010\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\002\033\003\011\004\015\005\017\006\003" +
    "\007\013\010\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\040" +
    "\006\003\007\013\010\004\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // atome ::= ENTIER 
            {
              Object RESULT =null;
		 System.out.println("Réduction atome -> entier"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atome",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atome ::= IDENT 
            {
              Object RESULT =null;
		 System.out.println("Réduction atome -> id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atome",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // facteur ::= PAROUV expr PARFER 
            {
              Object RESULT =null;
		 System.out.println("Réduction facteur -> ( expr )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // facteur ::= atome 
            {
              Object RESULT =null;
		 System.out.println("Réduction facteur -> atome"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // facteur ::= PLUS atome 
            {
              Object RESULT =null;
		 System.out.println("Réduction facteur -> + atome"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // facteur ::= MOINS atome 
            {
              Object RESULT =null;
		 System.out.println("Réduction facteur -> - atome"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("facteur",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // terme ::= facteur 
            {
              Object RESULT =null;
		 System.out.println("Réduction terme -> facteur"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terme",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // terme ::= terme DIV facteur 
            {
              Object RESULT =null;
		 System.out.println("Réduction terme -> terme / facteur"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terme",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // terme ::= terme MULT facteur 
            {
              Object RESULT =null;
		 System.out.println("Réduction terme -> terme * facteur"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terme",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= terme 
            {
              Object RESULT =null;
		 System.out.println("Réduction expr -> terme"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= expr MOINS terme 
            {
              Object RESULT =null;
		 System.out.println("Réduction expr -> expr - terme"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= expr PLUS terme 
            {
              Object RESULT =null;
		 System.out.println("Réduction expr -> expr + terme"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // affect ::= SET IDENT EGAL expr 
            {
              Object RESULT =null;
		 System.out.println("Réduction affect -> set id = expr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("affect",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inst ::= expr 
            {
              Object RESULT =null;
		 System.out.println("Réduction inst -> expr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inst ::= affect 
            {
              Object RESULT =null;
		 System.out.println("Réduction inst -> affect"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instructions ::= 
            {
              Object RESULT =null;
		 System.out.println("Réduction instructions -> epsilon"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // instructions ::= inst POINTV instructions 
            {
              Object RESULT =null;
		 System.out.println("Réduction instructions -> inst; instructions");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instructions",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= instructions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

